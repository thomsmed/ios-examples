//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: foo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Grpcftw_FooServiceClient`, then call methods of this protocol to make API calls.
public protocol Grpcftw_FooServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpcftw_FooServiceClientInterceptorFactoryProtocol? { get }

  func listFoo(
    _ request: Grpcftw_ListFooRequest,
    callOptions: CallOptions?,
    handler: @escaping (Grpcftw_GetFooResponse) -> Void
  ) -> ServerStreamingCall<Grpcftw_ListFooRequest, Grpcftw_GetFooResponse>

  func getFoo(
    _ request: Grpcftw_GetFooRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_GetFooRequest, Grpcftw_GetFooResponse>

  func setFoo(
    _ request: Grpcftw_SetFooRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_SetFooRequest, Grpcftw_SetFooResponse>

  func updateFoo(
    _ request: Grpcftw_UpdateFooRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_UpdateFooRequest, Grpcftw_UpdateFooResponse>

  func deleteFoo(
    _ request: Grpcftw_DeleteFooRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_DeleteFooRequest, Grpcftw_DeleteFooResponse>
}

extension Grpcftw_FooServiceClientProtocol {
  public var serviceName: String {
    return "grpcftw.FooService"
  }

  /// Server streaming call to ListFoo
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFoo.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listFoo(
    _ request: Grpcftw_ListFooRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Grpcftw_GetFooResponse) -> Void
  ) -> ServerStreamingCall<Grpcftw_ListFooRequest, Grpcftw_GetFooResponse> {
    return self.makeServerStreamingCall(
      path: "/grpcftw.FooService/ListFoo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFooInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetFoo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFoo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFoo(
    _ request: Grpcftw_GetFooRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_GetFooRequest, Grpcftw_GetFooResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.FooService/GetFoo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFooInterceptors() ?? []
    )
  }

  /// Unary call to SetFoo
  ///
  /// - Parameters:
  ///   - request: Request to send to SetFoo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setFoo(
    _ request: Grpcftw_SetFooRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_SetFooRequest, Grpcftw_SetFooResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.FooService/SetFoo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFooInterceptors() ?? []
    )
  }

  /// Unary call to UpdateFoo
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateFoo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateFoo(
    _ request: Grpcftw_UpdateFooRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_UpdateFooRequest, Grpcftw_UpdateFooResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.FooService/UpdateFoo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateFooInterceptors() ?? []
    )
  }

  /// Unary call to DeleteFoo
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteFoo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteFoo(
    _ request: Grpcftw_DeleteFooRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_DeleteFooRequest, Grpcftw_DeleteFooResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.FooService/DeleteFoo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteFooInterceptors() ?? []
    )
  }
}

public protocol Grpcftw_FooServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'listFoo'.
  func makeListFooInterceptors() -> [ClientInterceptor<Grpcftw_ListFooRequest, Grpcftw_GetFooResponse>]

  /// - Returns: Interceptors to use when invoking 'getFoo'.
  func makeGetFooInterceptors() -> [ClientInterceptor<Grpcftw_GetFooRequest, Grpcftw_GetFooResponse>]

  /// - Returns: Interceptors to use when invoking 'setFoo'.
  func makeSetFooInterceptors() -> [ClientInterceptor<Grpcftw_SetFooRequest, Grpcftw_SetFooResponse>]

  /// - Returns: Interceptors to use when invoking 'updateFoo'.
  func makeUpdateFooInterceptors() -> [ClientInterceptor<Grpcftw_UpdateFooRequest, Grpcftw_UpdateFooResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteFoo'.
  func makeDeleteFooInterceptors() -> [ClientInterceptor<Grpcftw_DeleteFooRequest, Grpcftw_DeleteFooResponse>]
}

public final class Grpcftw_FooServiceClient: Grpcftw_FooServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Grpcftw_FooServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the grpcftw.FooService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpcftw_FooServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public final class Grpcftw_FooServiceTestClient: Grpcftw_FooServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Grpcftw_FooServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Grpcftw_FooServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a streaming response for the ListFoo RPC. This must be called
  /// before calling 'listFoo'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeListFooResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_ListFooRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<Grpcftw_ListFooRequest, Grpcftw_GetFooResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: "/grpcftw.FooService/ListFoo", requestHandler: requestHandler)
  }

  public func enqueueListFooResponses(
    _ responses: [Grpcftw_GetFooResponse],
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_ListFooRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListFooResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'ListFoo'
  public var hasListFooResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/grpcftw.FooService/ListFoo")
  }

  /// Make a unary response for the GetFoo RPC. This must be called
  /// before calling 'getFoo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeGetFooResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_GetFooRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Grpcftw_GetFooRequest, Grpcftw_GetFooResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/grpcftw.FooService/GetFoo", requestHandler: requestHandler)
  }

  public func enqueueGetFooResponse(
    _ response: Grpcftw_GetFooResponse,
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_GetFooRequest>) -> () = { _ in }
  )  {
    let stream = self.makeGetFooResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'GetFoo'
  public var hasGetFooResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/grpcftw.FooService/GetFoo")
  }

  /// Make a unary response for the SetFoo RPC. This must be called
  /// before calling 'setFoo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSetFooResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_SetFooRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Grpcftw_SetFooRequest, Grpcftw_SetFooResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/grpcftw.FooService/SetFoo", requestHandler: requestHandler)
  }

  public func enqueueSetFooResponse(
    _ response: Grpcftw_SetFooResponse,
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_SetFooRequest>) -> () = { _ in }
  )  {
    let stream = self.makeSetFooResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SetFoo'
  public var hasSetFooResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/grpcftw.FooService/SetFoo")
  }

  /// Make a unary response for the UpdateFoo RPC. This must be called
  /// before calling 'updateFoo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeUpdateFooResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_UpdateFooRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Grpcftw_UpdateFooRequest, Grpcftw_UpdateFooResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/grpcftw.FooService/UpdateFoo", requestHandler: requestHandler)
  }

  public func enqueueUpdateFooResponse(
    _ response: Grpcftw_UpdateFooResponse,
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_UpdateFooRequest>) -> () = { _ in }
  )  {
    let stream = self.makeUpdateFooResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'UpdateFoo'
  public var hasUpdateFooResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/grpcftw.FooService/UpdateFoo")
  }

  /// Make a unary response for the DeleteFoo RPC. This must be called
  /// before calling 'deleteFoo'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeDeleteFooResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_DeleteFooRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Grpcftw_DeleteFooRequest, Grpcftw_DeleteFooResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/grpcftw.FooService/DeleteFoo", requestHandler: requestHandler)
  }

  public func enqueueDeleteFooResponse(
    _ response: Grpcftw_DeleteFooResponse,
    _ requestHandler: @escaping (FakeRequestPart<Grpcftw_DeleteFooRequest>) -> () = { _ in }
  )  {
    let stream = self.makeDeleteFooResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'DeleteFoo'
  public var hasDeleteFooResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/grpcftw.FooService/DeleteFoo")
  }
}

