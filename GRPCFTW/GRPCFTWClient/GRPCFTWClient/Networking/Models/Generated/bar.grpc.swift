//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bar.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Grpcftw_BarServiceClient`, then call methods of this protocol to make API calls.
public protocol Grpcftw_BarServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpcftw_BarServiceClientInterceptorFactoryProtocol? { get }

  func listBar(
    _ request: Grpcftw_ListBarRequest,
    callOptions: CallOptions?,
    handler: @escaping (Grpcftw_GetBarResponse) -> Void
  ) -> ServerStreamingCall<Grpcftw_ListBarRequest, Grpcftw_GetBarResponse>

  func getBar(
    _ request: Grpcftw_GetBarRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_GetBarRequest, Grpcftw_GetBarResponse>

  func setBar(
    _ request: Grpcftw_SetBarRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_SetBarRequest, Grpcftw_SetBarResponse>

  func updateBar(
    _ request: Grpcftw_UpdateBarRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_UpdateBarRequest, Grpcftw_UpdateBarResponse>

  func deleteBar(
    _ request: Grpcftw_DeleteBarRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpcftw_DeleteBarRequest, Grpcftw_DeleteBarResponse>
}

extension Grpcftw_BarServiceClientProtocol {
  public var serviceName: String {
    return "grpcftw.BarService"
  }

  /// Server streaming call to ListBar
  ///
  /// - Parameters:
  ///   - request: Request to send to ListBar.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listBar(
    _ request: Grpcftw_ListBarRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Grpcftw_GetBarResponse) -> Void
  ) -> ServerStreamingCall<Grpcftw_ListBarRequest, Grpcftw_GetBarResponse> {
    return self.makeServerStreamingCall(
      path: "/grpcftw.BarService/ListBar",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListBarInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetBar
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBar.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBar(
    _ request: Grpcftw_GetBarRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_GetBarRequest, Grpcftw_GetBarResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.BarService/GetBar",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBarInterceptors() ?? []
    )
  }

  /// Unary call to SetBar
  ///
  /// - Parameters:
  ///   - request: Request to send to SetBar.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setBar(
    _ request: Grpcftw_SetBarRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_SetBarRequest, Grpcftw_SetBarResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.BarService/SetBar",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetBarInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBar
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBar.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateBar(
    _ request: Grpcftw_UpdateBarRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_UpdateBarRequest, Grpcftw_UpdateBarResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.BarService/UpdateBar",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBarInterceptors() ?? []
    )
  }

  /// Unary call to DeleteBar
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBar.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteBar(
    _ request: Grpcftw_DeleteBarRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpcftw_DeleteBarRequest, Grpcftw_DeleteBarResponse> {
    return self.makeUnaryCall(
      path: "/grpcftw.BarService/DeleteBar",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBarInterceptors() ?? []
    )
  }
}

public protocol Grpcftw_BarServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'listBar'.
  func makeListBarInterceptors() -> [ClientInterceptor<Grpcftw_ListBarRequest, Grpcftw_GetBarResponse>]

  /// - Returns: Interceptors to use when invoking 'getBar'.
  func makeGetBarInterceptors() -> [ClientInterceptor<Grpcftw_GetBarRequest, Grpcftw_GetBarResponse>]

  /// - Returns: Interceptors to use when invoking 'setBar'.
  func makeSetBarInterceptors() -> [ClientInterceptor<Grpcftw_SetBarRequest, Grpcftw_SetBarResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBar'.
  func makeUpdateBarInterceptors() -> [ClientInterceptor<Grpcftw_UpdateBarRequest, Grpcftw_UpdateBarResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteBar'.
  func makeDeleteBarInterceptors() -> [ClientInterceptor<Grpcftw_DeleteBarRequest, Grpcftw_DeleteBarResponse>]
}

public final class Grpcftw_BarServiceClient: Grpcftw_BarServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Grpcftw_BarServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the grpcftw.BarService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpcftw_BarServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

