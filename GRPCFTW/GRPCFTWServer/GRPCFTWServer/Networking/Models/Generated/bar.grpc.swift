//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bar.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// To build a server, implement a class that conforms to this protocol.
public protocol Grpcftw_BarServiceProvider: CallHandlerProvider {
  var interceptors: Grpcftw_BarServiceServerInterceptorFactoryProtocol? { get }

  func listBar(request: Grpcftw_ListBarRequest, context: StreamingResponseCallContext<Grpcftw_GetBarResponse>) -> EventLoopFuture<GRPCStatus>

  func getBar(request: Grpcftw_GetBarRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_GetBarResponse>

  func setBar(request: Grpcftw_SetBarRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_SetBarResponse>

  func updateBar(request: Grpcftw_UpdateBarRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_UpdateBarResponse>

  func deleteBar(request: Grpcftw_DeleteBarRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_DeleteBarResponse>
}

extension Grpcftw_BarServiceProvider {
  public var serviceName: Substring { return "grpcftw.BarService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListBar":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_ListBarRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_GetBarResponse>(),
        interceptors: self.interceptors?.makeListBarInterceptors() ?? [],
        userFunction: self.listBar(request:context:)
      )

    case "GetBar":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_GetBarRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_GetBarResponse>(),
        interceptors: self.interceptors?.makeGetBarInterceptors() ?? [],
        userFunction: self.getBar(request:context:)
      )

    case "SetBar":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_SetBarRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_SetBarResponse>(),
        interceptors: self.interceptors?.makeSetBarInterceptors() ?? [],
        userFunction: self.setBar(request:context:)
      )

    case "UpdateBar":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_UpdateBarRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_UpdateBarResponse>(),
        interceptors: self.interceptors?.makeUpdateBarInterceptors() ?? [],
        userFunction: self.updateBar(request:context:)
      )

    case "DeleteBar":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_DeleteBarRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_DeleteBarResponse>(),
        interceptors: self.interceptors?.makeDeleteBarInterceptors() ?? [],
        userFunction: self.deleteBar(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Grpcftw_BarServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listBar'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListBarInterceptors() -> [ServerInterceptor<Grpcftw_ListBarRequest, Grpcftw_GetBarResponse>]

  /// - Returns: Interceptors to use when handling 'getBar'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBarInterceptors() -> [ServerInterceptor<Grpcftw_GetBarRequest, Grpcftw_GetBarResponse>]

  /// - Returns: Interceptors to use when handling 'setBar'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetBarInterceptors() -> [ServerInterceptor<Grpcftw_SetBarRequest, Grpcftw_SetBarResponse>]

  /// - Returns: Interceptors to use when handling 'updateBar'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBarInterceptors() -> [ServerInterceptor<Grpcftw_UpdateBarRequest, Grpcftw_UpdateBarResponse>]

  /// - Returns: Interceptors to use when handling 'deleteBar'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteBarInterceptors() -> [ServerInterceptor<Grpcftw_DeleteBarRequest, Grpcftw_DeleteBarResponse>]
}
