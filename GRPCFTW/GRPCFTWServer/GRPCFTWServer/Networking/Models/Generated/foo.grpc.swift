//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: foo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// To build a server, implement a class that conforms to this protocol.
public protocol Grpcftw_FooServiceProvider: CallHandlerProvider {
  var interceptors: Grpcftw_FooServiceServerInterceptorFactoryProtocol? { get }

  func listFoo(request: Grpcftw_ListFooRequest, context: StreamingResponseCallContext<Grpcftw_GetFooResponse>) -> EventLoopFuture<GRPCStatus>

  func getFoo(request: Grpcftw_GetFooRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_GetFooResponse>

  func setFoo(request: Grpcftw_SetFooRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_SetFooResponse>

  func updateFoo(request: Grpcftw_UpdateFooRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_UpdateFooResponse>

  func deleteFoo(request: Grpcftw_DeleteFooRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpcftw_DeleteFooResponse>
}

extension Grpcftw_FooServiceProvider {
  public var serviceName: Substring { return "grpcftw.FooService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ListFoo":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_ListFooRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_GetFooResponse>(),
        interceptors: self.interceptors?.makeListFooInterceptors() ?? [],
        userFunction: self.listFoo(request:context:)
      )

    case "GetFoo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_GetFooRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_GetFooResponse>(),
        interceptors: self.interceptors?.makeGetFooInterceptors() ?? [],
        userFunction: self.getFoo(request:context:)
      )

    case "SetFoo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_SetFooRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_SetFooResponse>(),
        interceptors: self.interceptors?.makeSetFooInterceptors() ?? [],
        userFunction: self.setFoo(request:context:)
      )

    case "UpdateFoo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_UpdateFooRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_UpdateFooResponse>(),
        interceptors: self.interceptors?.makeUpdateFooInterceptors() ?? [],
        userFunction: self.updateFoo(request:context:)
      )

    case "DeleteFoo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpcftw_DeleteFooRequest>(),
        responseSerializer: ProtobufSerializer<Grpcftw_DeleteFooResponse>(),
        interceptors: self.interceptors?.makeDeleteFooInterceptors() ?? [],
        userFunction: self.deleteFoo(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Grpcftw_FooServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'listFoo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFooInterceptors() -> [ServerInterceptor<Grpcftw_ListFooRequest, Grpcftw_GetFooResponse>]

  /// - Returns: Interceptors to use when handling 'getFoo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFooInterceptors() -> [ServerInterceptor<Grpcftw_GetFooRequest, Grpcftw_GetFooResponse>]

  /// - Returns: Interceptors to use when handling 'setFoo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetFooInterceptors() -> [ServerInterceptor<Grpcftw_SetFooRequest, Grpcftw_SetFooResponse>]

  /// - Returns: Interceptors to use when handling 'updateFoo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateFooInterceptors() -> [ServerInterceptor<Grpcftw_UpdateFooRequest, Grpcftw_UpdateFooResponse>]

  /// - Returns: Interceptors to use when handling 'deleteFoo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteFooInterceptors() -> [ServerInterceptor<Grpcftw_DeleteFooRequest, Grpcftw_DeleteFooResponse>]
}
